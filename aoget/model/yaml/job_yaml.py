import yaml
from model.job import Job
from model.dto.job_dto import JobDTO
from model.dto.file_model_dto import FileModelDTO
from util.aogetutil import human_timestamp_from, timestamp_str


def job_to_obj(job: Job) -> dict:
    job_dict = {}
    job_dict["name"] = job.name
    job_dict["page_url"] = job.page_url
    job_dict["total_size_bytes"] = job.total_size_bytes
    files = []
    file_count = 0
    for file in job.files:
        if file.selected:
            file_count += 1
            file_dict = {}
            file_dict["name"] = file.name
            file_dict["url"] = file.url
            file_dict["size_bytes"] = file.size_bytes
            files.append(file_dict)
    job_dict["file_count"] = file_count
    job_dict["files"] = files
    return job_dict


def write_job_yaml(job: Job, path: str) -> None:
    job_dict = job_to_obj(job)
    with open(path, "w") as f:
        f.write(
            f"# Generated by aoget on {human_timestamp_from(timestamp_str())}. https://github.com/endre-git/aoget\n"
        )
        yaml.dump(job_dict, f, sort_keys=False)


def read_from_yaml(path: str) -> tuple[JobDTO, list]:
    with open(path, "r") as f:
        data = yaml.load(f, Loader=yaml.FullLoader)
        job_dto = JobDTO(
            id=-1,
            name=data["name"],
            page_url=data["page_url"],
            total_size_bytes=data["total_size_bytes"],
        )
        files = []
        for file in data["files"]:
            file_model_dto = FileModelDTO.from_url(file["url"])
            file_model_dto.job_name = job_dto.name
            file_model_dto.size_bytes = file["size_bytes"]
            files.append(file_model_dto)
        return job_dto, files
